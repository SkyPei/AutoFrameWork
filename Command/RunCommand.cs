using System;
using System.Collections.Generic;
using System.Reflection;
using ApiFrameWork.Schema;
using System.Linq;
using System.Data;
using ApiFrameWork.Utility;
using ApiFrameWork.Report;
using System.Text.RegularExpressions;
using System.IO;
using Newtonsoft.Json;

namespace ApiFrameWork.Command
{
    public class RunCommand : BaseCommand
    {
        [Command]
        public string file
        {
            get; set;
        }

        [Command]
        public string sheet
        {
            get; set;
        }

        [Command]

        public string schedule
        {
            get; set;
        }


        public override void Help()
        {
            Console.WriteLine("Runs a script or a list of scripts.");
            Console.WriteLine("");
            Console.WriteLine("run [name] {--file=data file name} {--sheet=sheet name} {--schedule=HHmm}");
            Console.WriteLine("");
            Console.WriteLine("    [name]");
            Console.WriteLine("          Specifies script name  or a json file for batch run. json file template can be generated by command : gen");
            Console.WriteLine("");
            Console.WriteLine("  --file                   Specifies the data file for single script execution only, will replce the original data file which was made in script.");
            Console.WriteLine("  --sheet                  Specifies the sheet of data file for single script execution only, will replce the original sheet which was made in script.");
            Console.WriteLine("  --schedule               Specifies the running time of scripts, format is HHmm, like 0830 means 08:30.");
        }
        public override void Run()
        {
            throw new NotImplementedException();
        }



        public override void Run(string args)
        {
            Regex regjson = new Regex(@"(^|[ ]+)[\S ]+\.json($|)", RegexOptions.IgnoreCase);


            if (regjson.IsMatch(args))
            {// batch scripts
                string jsonfile = regjson.Match(args).Value;
                string content = string.Empty;
                if (!File.Exists(jsonfile))
                {
                    throw new Exception.CommandPaseException($"Not Found template file {{{jsonfile}}}");
                }

                string filename = Path.GetFileNameWithoutExtension(jsonfile);

                using (FileStream fs = File.Open(jsonfile, FileMode.Open, FileAccess.Read, FileShare.Read))
                {
                    using (System.IO.StreamReader sr = new StreamReader(fs))
                    {
                        content = sr.ReadToEnd();
                    }

                }
                BatchTemplate btemplate = JsonConvert.DeserializeObject<BatchTemplate>(content);
                if (btemplate == null)
                {
                    throw new Exception.CommandPaseException($"Parse template error");
                }

                // add schedule runing 
                if (!string.IsNullOrWhiteSpace(btemplate.Schedule))
                {
                    DateTime currentdt = DateTime.Now;
                    DateTime dt = DateTime.ParseExact($"{currentdt.ToString("yyyyMMdd")}{btemplate.Schedule}", "yyyyMMddHHmm", System.Globalization.CultureInfo.InvariantCulture);
                    if (dt < currentdt)
                    {
                        dt.AddDays(1);
                    }
                    int sec = (int)dt.Subtract(currentdt).TotalSeconds;
                    if (sec > 0)
                    {
                        Console.WriteLine($"Program will sleep until <{dt.ToString("HH:mm")}>");
                        System.Threading.Thread.Sleep(sec * 1000);
                    }

                }

                Dictionary<string, Type> names = new Dictionary<string, Type>();
                foreach (var item in List)
                {
                    var attribute = item.GetCustomAttribute<ScriptAttribute>();
                    string name = attribute == null ? item.Name.ToLower() : attribute.DisplayName.ToLower();
                    names.Add(name, item);
                }


                ReportModel rm = new ReportModel();
                rm.StartTime = DateTime.Now;
                rm.TestCases = new List<ReportItem>();
                LaunchConfig config = LaunchConfig.GetInstance();
                foreach (var batch in btemplate.Batch)
                {


                    if (batch.IsDependencyQueue)
                    {
                        int maxsupporteddatalen = 0;
                        if (batch.Groups.Count > 0)
                        {
                            string currentfile = batch.Groups[0].File;
                            string currentsheet = batch.Groups[0].Sheet;
                            var type = names.FirstOrDefault(t => t.Key == batch.Groups[0].name.ToLower()).Value;

                            if (type == null)
                            {
                                Console.WriteLine($"Not Found Script {{{batch.Groups[0].name}}}");
                                continue;
                            }
                            if (type.GetConstructors().Count() > 1)
                            {
                                Console.WriteLine($"Script {{{batch.Groups[0].name}}} Error as more than 1 Constructor.");
                                continue;
                            }

                            var scriptinfo = type.GetCustomAttribute<ScriptAttribute>();
                            if (string.IsNullOrEmpty(currentfile))
                            {
                                currentfile = string.IsNullOrEmpty(btemplate.File) ? string.IsNullOrEmpty(scriptinfo.DataFile) ? this.DataFile : scriptinfo.DataFile : btemplate.File;
                            }
                            if (string.IsNullOrEmpty(currentsheet))
                            {
                                currentsheet = string.IsNullOrEmpty(btemplate.Sheet) ? string.IsNullOrEmpty(scriptinfo.SheetName) ? this.SheetName : scriptinfo.SheetName : btemplate.Sheet;
                            }

                            DataProvider dp = new DataProvider(currentfile, currentsheet);
                            ProviderModel dt = dp.ExtractData(batch.Groups[0].name);
                            var list = dt.list.Where(t => t.IsEnabled).ToList();
                            maxsupporteddatalen = list.Count;

                            for (int n = 0; n < maxsupporteddatalen; n++)
                            {
                                foreach (var item in batch.Groups)
                                {
                                    string currentrunfile = item.File;
                                    string currentrunsheet = item.Sheet;


                                    var runtype = names.FirstOrDefault(t => t.Key == item.name.ToLower()).Value;

                                    if (runtype == null)
                                    {
                                        Console.WriteLine($"Not Found Script {{{item.name}}}");
                                        break;
                                    }

                                    var runscriptinfo = runtype.GetCustomAttribute<ScriptAttribute>();
                                    if (string.IsNullOrEmpty(currentrunfile))
                                    {
                                        currentrunfile = string.IsNullOrEmpty(btemplate.File) ? string.IsNullOrEmpty(runscriptinfo.DataFile) ? this.DataFile : runscriptinfo.DataFile : btemplate.File;
                                    }
                                    if (string.IsNullOrEmpty(currentrunsheet))
                                    {
                                        currentrunsheet = string.IsNullOrEmpty(btemplate.Sheet) ? string.IsNullOrEmpty(runscriptinfo.SheetName) ? this.SheetName : runscriptinfo.SheetName : btemplate.Sheet;
                                    }

                                    DataProvider rundp = new DataProvider(currentrunfile, currentrunsheet);
                                    ProviderModel rundt = rundp.ExtractData(item.name);
                                    var runlist = rundt.list.Where(t => t.IsEnabled).ToList();
                                    if (runlist.Count < n)
                                    {
                                        break;
                                    }
                                    ReportItem testcase = rm.TestCases.FirstOrDefault(t => t.Name == item.name);
                                    if (testcase == null)
                                    {
                                        testcase = new ReportItem();
                                        testcase.Name = item.name;
                                        testcase.Details = new List<ReportItemDetail>();
                                        rm.TestCases.Add(testcase);
                                    }




                                    ReportItemDetail rd = new ReportItemDetail();
                                    testcase.Details.Add(rd);
                                    string currentdate = DateTime.Now.ToString("MMddyyyyHHmmss");
                                    //启动日志

                                    using (Log.Log log = Log.Log.GetLog($"{item.name}_{currentdate}_{n}", config.LogFolderPath))
                                    {
                                        using (Log.ResponseContent contents = Log.ResponseContent.GetInstance())
                                        {
                                            bool isbreak = false;
                                            Script script = null;
                                            try
                                            {

                                                script = Activator.CreateInstance(runtype) as Script;
                                                script.Log = log;

                                                script.Test(runlist[n].Dict);
                                                var parameters = type.GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance).Where(t => t.GetCustomAttribute<InjectAttribute>() != null).ToList();
                                                foreach (var parameter in parameters)
                                                {
                                                    var objvalue = parameter.GetValue(script);
                                                    if (objvalue != null)
                                                    {
                                                        var returntype = typeof(RegistrationBuilder<>).MakeGenericType(parameter.FieldType);
                                                        var parobj = Convert.ChangeType(config.GetRB(parameter.FieldType), returntype);
                                                        if (parobj != null)
                                                        {
                                                            MethodInfo handlerMethod = returntype.GetProperty("EndHandle").GetValue(parobj).GetType().GetMethod("Invoke");
                                                            handlerMethod.Invoke(returntype.GetProperty("EndHandle").GetValue(parobj), new object[] { objvalue, log });
                                                        }
                                                    }
                                                }

                                                testcase.Pass += 1;
                                                rd.Status = "Pass";
                                                if (string.IsNullOrEmpty(script.Country))
                                                {
                                                    var countrydata = runlist[n].Dict.FirstOrDefault(t => "country" == t.Key.ToLower());
                                                    if (!string.IsNullOrEmpty(countrydata.Value))
                                                    {
                                                        rd.Country = countrydata.Value;
                                                    }


                                                }
                                                else
                                                {
                                                    rd.Country = script.Country;

                                                }

                                                if (string.IsNullOrEmpty(script.CaseId))
                                                {
                                                    var caseiddata = runlist[n].Dict.FirstOrDefault(t => "caseid" == t.Key.ToLower());
                                                    if (!string.IsNullOrEmpty(caseiddata.Value))
                                                    {
                                                        rd.CaseId = caseiddata.Value;
                                                    }
                                                }
                                                else
                                                {
                                                    rd.CaseId = script.CaseId;

                                                }

                                                if (string.IsNullOrEmpty(script.ReportName))
                                                {
                                                    var reportnamedata = runlist[n].Dict.FirstOrDefault(t => "reportname" == t.Key.ToLower());
                                                    if (!string.IsNullOrEmpty(reportnamedata.Value))
                                                    {
                                                        rd.Name = reportnamedata.Value;
                                                    }


                                                }
                                                else
                                                {
                                                    rd.Name = script.ReportName;

                                                }
                                            }
                                            catch (Exception.AssertionException e)
                                            {
                                                Console.WriteLine(e.Message);
                                                testcase.Fail += 1;
                                                rd.Status = "Fail";
                                                rd.ErrorMessage = e.Message;
                                                if (string.IsNullOrEmpty(script.Country))
                                                {
                                                    var countrydata = runlist[n].Dict.FirstOrDefault(t => "country" == t.Key.ToLower());
                                                    if (!string.IsNullOrEmpty(countrydata.Value))
                                                    {
                                                        rd.Country = countrydata.Value;
                                                    }
                                                }
                                                else
                                                {
                                                    rd.Country = script.Country;

                                                }

                                                if (string.IsNullOrEmpty(script.CaseId))
                                                {
                                                    var caseiddata = runlist[n].Dict.FirstOrDefault(t => "caseid" == t.Key.ToLower());
                                                    if (!string.IsNullOrEmpty(caseiddata.Value))
                                                    {
                                                        rd.CaseId = caseiddata.Value;
                                                    }
                                                }
                                                else
                                                {
                                                    rd.CaseId = script.CaseId;

                                                }
                                                if (string.IsNullOrEmpty(script.ReportName))
                                                {
                                                    var reportnamedata = runlist[n].Dict.FirstOrDefault(t => "reportname" == t.Key.ToLower());
                                                    if (!string.IsNullOrEmpty(reportnamedata.Value))
                                                    {
                                                        rd.Name = reportnamedata.Value;
                                                    }


                                                }
                                                else
                                                {
                                                    rd.Name = script.ReportName;

                                                }


                                                isbreak = true;
                                                var parameters = type.GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance).Where(t => t.GetCustomAttribute<InjectAttribute>() != null).ToList();
                                                foreach (var parameter in parameters)
                                                {
                                                    var objvalue = parameter.GetValue(script);
                                                    if (objvalue != null)
                                                    {
                                                        var returntype = typeof(RegistrationBuilder<>).MakeGenericType(parameter.FieldType);
                                                        var parobj = Convert.ChangeType(config.GetRB(parameter.FieldType), returntype);
                                                        if (parobj != null)
                                                        {
                                                            MethodInfo handlerMethod = returntype.GetProperty("EndHandle").GetValue(parobj).GetType().GetMethod("Invoke");
                                                            handlerMethod.Invoke(returntype.GetProperty("EndHandle").GetValue(parobj), new object[] { objvalue, log });
                                                        }
                                                    }
                                                }
                                                log.Info("-------------------------Failed------------------------\r\n");
                                                log.Info($"{e.Message}\r\n");
                                                log.Info("-------------------------Tracking---------------------\r\n");
                                                log.Info($"{e.StackTrace}\r\n");

                                            }
                                            catch (System.Exception e)
                                            {
                                                var parameters = type.GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance).Where(t => t.GetCustomAttribute<InjectAttribute>() != null).ToList();
                                                foreach (var parameter in parameters)
                                                {
                                                    var objvalue = parameter.GetValue(script);
                                                    if (objvalue != null)
                                                    {
                                                        var returntype = typeof(RegistrationBuilder<>).MakeGenericType(parameter.FieldType);
                                                        var parobj = Convert.ChangeType(config.GetRB(parameter.FieldType), returntype);
                                                        if (parobj != null)
                                                        {
                                                            MethodInfo handlerMethod = returntype.GetProperty("EndHandle").GetValue(parobj).GetType().GetMethod("Invoke");
                                                            handlerMethod.Invoke(returntype.GetProperty("EndHandle").GetValue(parobj), new object[] { objvalue, log });
                                                        }
                                                    }
                                                }

                                                var innerex = GetInnerException(e);
                                                log.Info("-------------------------Error------------------------\r\n");
                                                log.Info($"{innerex.Message}\r\n");
                                                log.Info("-------------------------Tracking---------------------\r\n");
                                                log.Info($"{innerex.StackTrace}\r\n");
                                                Console.WriteLine(innerex.Message);
                                                testcase.Error += 1;
                                                rd.Status = "Error";
                                                rd.ErrorMessage = e.Message;
                                                if (string.IsNullOrEmpty(script.Country))
                                                {
                                                    var countrydata = runlist[n].Dict.FirstOrDefault(t => "country" == t.Key.ToLower());
                                                    if (!string.IsNullOrEmpty(countrydata.Value))
                                                    {
                                                        rd.Country = countrydata.Value;
                                                    }
                                                }
                                                else
                                                {
                                                    rd.Country = script.Country;

                                                }

                                                if (string.IsNullOrEmpty(script.CaseId))
                                                {
                                                    var caseiddata = runlist[n].Dict.FirstOrDefault(t => "caseid" == t.Key.ToLower());
                                                    if (!string.IsNullOrEmpty(caseiddata.Value))
                                                    {
                                                        rd.CaseId = caseiddata.Value;
                                                    }
                                                }
                                                else
                                                {
                                                    rd.CaseId = script.CaseId;

                                                }
                                                if (string.IsNullOrEmpty(script.ReportName))
                                                {
                                                    var reportnamedata = runlist[n].Dict.FirstOrDefault(t => "reportname" == t.Key.ToLower());
                                                    if (!string.IsNullOrEmpty(reportnamedata.Value))
                                                    {
                                                        rd.Name = reportnamedata.Value;
                                                    }


                                                }
                                                else
                                                {
                                                    rd.Name = script.ReportName;

                                                }

                                                isbreak = true;
                                            }
                                            testcase.Count += 1;
                                            rd.Log = log.Stores.Clone();
                                            rd.Data = runlist[n].Dict;
                                            if (isbreak)
                                            {
                                                break;
                                            }
                                        }
                                    }
                                    try
                                    {
                                        rundp.Update(dt);
                                    }
                                    catch (System.Exception ee)
                                    {
                                        Console.WriteLine(ee.Message);
                                    }

                                }


                            }



                        }
                        else
                        {
                            continue;
                        }






                    }
                    else
                    {

                        foreach (var item in batch.Groups)
                        {
                            string currentfile = item.File;
                            string currentsheet = item.Sheet;


                            var type = names.FirstOrDefault(t => t.Key == item.name.ToLower()).Value;

                            if (type == null)
                            {
                                Console.WriteLine($"Not Found Script {{{item.name}}}");
                                continue;
                            }
                            var scriptinfo = type.GetCustomAttribute<ScriptAttribute>();
                            if (string.IsNullOrEmpty(currentfile))
                            {
                                currentfile = string.IsNullOrEmpty(btemplate.File) ? string.IsNullOrEmpty(scriptinfo.DataFile) ? this.DataFile : scriptinfo.DataFile : btemplate.File;
                            }
                            if (string.IsNullOrEmpty(currentsheet))
                            {
                                currentsheet = string.IsNullOrEmpty(btemplate.Sheet) ? string.IsNullOrEmpty(scriptinfo.SheetName) ? this.SheetName : scriptinfo.SheetName : btemplate.Sheet;
                            }

                            DataProvider dp = new DataProvider(currentfile, currentsheet);
                            ProviderModel dt = dp.ExtractData(item.name);
                            var list = dt.list.Where(t => t.IsEnabled).ToList();

                            ReportItem testcase = rm.TestCases.FirstOrDefault(t => t.Name == item.name);
                            if (testcase == null)
                            {
                                testcase = new ReportItem();
                                testcase.Name = item.name;
                                testcase.Details = new List<ReportItemDetail>();
                                rm.TestCases.Add(testcase);
                            }








                            int index = 0;
                            foreach (DataModel row in list)
                            {
                                index++;

                                ReportItemDetail rd = new ReportItemDetail();
                                testcase.Details.Add(rd);
                                string currentdate = DateTime.Now.ToString("MMddyyyyHHmmss");
                                //启动日志

                                using (Log.Log log = Log.Log.GetLog($"{item.name}_{currentdate}_{index}", config.LogFolderPath))
                                {
                                    using (Log.ResponseContent contents = Log.ResponseContent.GetInstance())
                                    {
                                        Script script = null;
                                        try
                                        {

                                            script = Activator.CreateInstance(type) as Script;
                                            script.Log = log;
                                            script.Test(row.Dict);
                                            var parameters = type.GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance).Where(t => t.GetCustomAttribute<InjectAttribute>() != null).ToList();
                                            foreach (var parameter in parameters)
                                            {
                                                var objvalue = parameter.GetValue(script);
                                                if (objvalue != null)
                                                {
                                                    var returntype = typeof(RegistrationBuilder<>).MakeGenericType(parameter.FieldType);
                                                    var parobj = Convert.ChangeType(config.GetRB(parameter.FieldType), returntype);
                                                    if (parobj != null)
                                                    {
                                                        MethodInfo handlerMethod = returntype.GetProperty("EndHandle").GetValue(parobj).GetType().GetMethod("Invoke");
                                                        handlerMethod.Invoke(returntype.GetProperty("EndHandle").GetValue(parobj), new object[] { objvalue, log });
                                                    }
                                                }
                                            }

                                            testcase.Pass += 1;
                                            rd.Status = "Pass";

                                            if (string.IsNullOrEmpty(script.Country))
                                            {
                                                var countrydata = row.Dict.FirstOrDefault(t => "country" == t.Key.ToLower());
                                                if (!string.IsNullOrEmpty(countrydata.Value))
                                                {
                                                    rd.Country = countrydata.Value;
                                                }
                                            }
                                            else
                                            {
                                                rd.Country = script.Country;

                                            }

                                            if (string.IsNullOrEmpty(script.CaseId))
                                            {
                                                var caseiddata = row.Dict.FirstOrDefault(t => "caseid" == t.Key.ToLower());
                                                if (!string.IsNullOrEmpty(caseiddata.Value))
                                                {
                                                    rd.CaseId = caseiddata.Value;
                                                }
                                            }
                                            else
                                            {
                                                rd.CaseId = script.CaseId;

                                            }
                                            if (string.IsNullOrEmpty(script.ReportName))
                                            {
                                                var reportnamedata = row.Dict.FirstOrDefault(t => "reportname" == t.Key.ToLower());
                                                if (!string.IsNullOrEmpty(reportnamedata.Value))
                                                {
                                                    rd.Name = reportnamedata.Value;
                                                }


                                            }
                                            else
                                            {
                                                rd.Name = script.ReportName;

                                            }
                                        }
                                        catch (Exception.AssertionException e)
                                        {
                                            Console.WriteLine(e.Message);
                                            testcase.Fail += 1;
                                            rd.Status = "Fail";
                                            rd.ErrorMessage = e.Message;
                                            if (string.IsNullOrEmpty(script.Country))
                                            {
                                                var countrydata = row.Dict.FirstOrDefault(t => "country" == t.Key.ToLower());
                                                if (!string.IsNullOrEmpty(countrydata.Value))
                                                {
                                                    rd.Country = countrydata.Value;
                                                }
                                            }
                                            else
                                            {
                                                rd.Country = script.Country;

                                            }

                                            if (string.IsNullOrEmpty(script.CaseId))
                                            {
                                                var caseiddata = row.Dict.FirstOrDefault(t => "caseid" == t.Key.ToLower());
                                                if (!string.IsNullOrEmpty(caseiddata.Value))
                                                {
                                                    rd.CaseId = caseiddata.Value;
                                                }
                                            }
                                            else
                                            {
                                                rd.CaseId = script.CaseId;

                                            }
                                            if (string.IsNullOrEmpty(script.ReportName))
                                            {
                                                var reportnamedata = row.Dict.FirstOrDefault(t => "reportname" == t.Key.ToLower());
                                                if (!string.IsNullOrEmpty(reportnamedata.Value))
                                                {
                                                    rd.Name = reportnamedata.Value;
                                                }


                                            }
                                            else
                                            {
                                                rd.Name = script.ReportName;

                                            }

                                            var parameters = type.GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance).Where(t => t.GetCustomAttribute<InjectAttribute>() != null).ToList();
                                            foreach (var parameter in parameters)
                                            {
                                                var objvalue = parameter.GetValue(script);
                                                if (objvalue != null)
                                                {
                                                    var returntype = typeof(RegistrationBuilder<>).MakeGenericType(parameter.FieldType);
                                                    var parobj = Convert.ChangeType(config.GetRB(parameter.FieldType), returntype);
                                                    if (parobj != null)
                                                    {
                                                        MethodInfo handlerMethod = returntype.GetProperty("EndHandle").GetValue(parobj).GetType().GetMethod("Invoke");
                                                        handlerMethod.Invoke(returntype.GetProperty("EndHandle").GetValue(parobj), new object[] { objvalue, log });
                                                    }
                                                }
                                            }
                                            log.Info("-------------------------Failed------------------------\r\n");
                                            log.Info($"{e.Message}\r\n");
                                            log.Info("-------------------------Tracking---------------------\r\n");
                                            log.Info($"{e.StackTrace}\r\n");
                                        }
                                        catch (System.Exception e)
                                        {
                                            var parameters = type.GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance).Where(t => t.GetCustomAttribute<InjectAttribute>() != null).ToList();
                                            foreach (var parameter in parameters)
                                            {
                                                var objvalue = parameter.GetValue(script);
                                                if (objvalue != null)
                                                {
                                                    var returntype = typeof(RegistrationBuilder<>).MakeGenericType(parameter.FieldType);
                                                    var parobj = Convert.ChangeType(config.GetRB(parameter.FieldType), returntype);
                                                    if (parobj != null)
                                                    {
                                                        MethodInfo handlerMethod = returntype.GetProperty("EndHandle").GetValue(parobj).GetType().GetMethod("Invoke");
                                                        handlerMethod.Invoke(returntype.GetProperty("EndHandle").GetValue(parobj), new object[] { objvalue, log });
                                                    }
                                                }
                                            }
                                            var innerex = GetInnerException(e);
                                            log.Info("-------------------------Error------------------------\r\n");
                                            log.Info($"{innerex.Message}\r\n");
                                            log.Info("-------------------------Tracking---------------------\r\n");
                                            log.Info($"{innerex.StackTrace}\r\n");
                                            Console.WriteLine(innerex.Message);
                                            testcase.Error += 1;
                                            rd.Status = "Error";
                                            rd.ErrorMessage = e.Message;
                                            if (string.IsNullOrEmpty(script.Country))
                                            {
                                                var countrydata = row.Dict.FirstOrDefault(t => "country" == t.Key.ToLower());
                                                if (!string.IsNullOrEmpty(countrydata.Value))
                                                {
                                                    rd.Country = countrydata.Value;
                                                }
                                            }
                                            else
                                            {
                                                rd.Country = script.Country;

                                            }

                                            if (string.IsNullOrEmpty(script.CaseId))
                                            {
                                                var caseiddata = row.Dict.FirstOrDefault(t => "caseid" == t.Key.ToLower());
                                                if (!string.IsNullOrEmpty(caseiddata.Value))
                                                {
                                                    rd.CaseId = caseiddata.Value;
                                                }
                                            }
                                            else
                                            {
                                                rd.CaseId = script.CaseId;

                                            }
                                            if (string.IsNullOrEmpty(script.ReportName))
                                            {
                                                var reportnamedata = row.Dict.FirstOrDefault(t => "reportname" == t.Key.ToLower());
                                                if (!string.IsNullOrEmpty(reportnamedata.Value))
                                                {
                                                    rd.Name = reportnamedata.Value;
                                                }


                                            }
                                            else
                                            {
                                                rd.Name = script.ReportName;

                                            }

                                        }
                                        testcase.Count += 1;
                                        rd.Log = log.Stores.Clone();
                                        rd.Data = row.Dict;
                                    }
                                }


                            }
                            try
                            {
                                dp.Update(dt);
                            }
                            catch (System.Exception ee)
                            {
                                Console.WriteLine(ee.Message);
                            }


                        }


                    }

                }
                rm.Duration = (DateTime.Now - rm.StartTime).Duration();
                rm.GenReport($"{filename}_{DateTime.Now.ToString("MMddyyyyHHmmss")}.html", config.LogFolderPath);
                Console.WriteLine("Script completed execution.");

            }
            else
            {
                string data = string.Empty;

                if ('\"' == args.FirstOrDefault())
                {
                    Regex regdata = new Regex($"^\\\"[\\S ]+\\\"", RegexOptions.IgnoreCase);
                    data = regdata.Match(args).Value;
                }
                else
                {
                    Regex regdata = new Regex($"^[\\S]+($|(?= ))", RegexOptions.IgnoreCase);
                    data = regdata.Match(args).Value;
                }




                Dictionary<string, Type> names = new Dictionary<string, Type>();
                foreach (var item in List)
                {
                    var attribute = item.GetCustomAttribute<ScriptAttribute>();
                    string name = attribute == null ? item.Name.ToLower() : attribute.DisplayName.ToLower();
                    names.Add(name, item);
                }

                var type = names.FirstOrDefault(t => t.Key == data.ToLower()).Value;

                if (type == null)
                {
                    throw new Exception.CommandPaseException($"Not Found Script {{{data}}}");
                }
                var scriptinfo = type.GetCustomAttribute<ScriptAttribute>();
                if (string.IsNullOrEmpty(file))
                {
                    file = string.IsNullOrEmpty(scriptinfo.DataFile) ? this.DataFile : scriptinfo.DataFile;
                }
                if (string.IsNullOrEmpty(sheet))
                {
                    sheet = string.IsNullOrEmpty(scriptinfo.SheetName) ? this.SheetName : scriptinfo.SheetName;
                }
                if (!string.IsNullOrWhiteSpace(this.schedule))
                {
                    DateTime currentdt = DateTime.Now;
                    DateTime mdt = DateTime.ParseExact($"{currentdt.ToString("yyyyMMdd")}{this.schedule}", "yyyyMMddHHmm", System.Globalization.CultureInfo.InvariantCulture);
                    if (mdt < currentdt)
                    {
                        mdt.AddDays(1);
                    }
                    int sec = (int)mdt.Subtract(currentdt).TotalSeconds;
                    if (sec > 0)
                    {
                        Console.WriteLine($"Program will sleep until <{mdt.ToString("HH:mm")}>");
                        System.Threading.Thread.Sleep(sec * 1000);
                    }
                }

                DataProvider dp = new DataProvider(file, sheet);
                ProviderModel dt = dp.ExtractData(data);
                var list = dt.list.Where(t => t.IsEnabled).ToList();
                ReportModel rm = new ReportModel();
                rm.StartTime = DateTime.Now;
                rm.TestCases = new List<ReportItem>();
                ReportItem testcase = new ReportItem();
                testcase.Name = data;
                testcase.Count = list.Count;
                testcase.Details = new List<ReportItemDetail>();
                rm.TestCases.Add(testcase);
                LaunchConfig config = LaunchConfig.GetInstance();


                int index = 0;
                foreach (DataModel row in list)
                {
                    index++;
                    // System.Threading.Thread.Sleep(1000);
                    ReportItemDetail rd = new ReportItemDetail();
                    testcase.Details.Add(rd);
                    string currentdate = DateTime.Now.ToString("MMddyyyyHHmmss");
                    //启动日志

                    using (Log.Log log = Log.Log.GetLog($"{data}_{currentdate}_{index}", config.LogFolderPath))
                    {
                        using (Log.ResponseContent contents = Log.ResponseContent.GetInstance())
                        {
                            Script script = null;
                            try
                            {

                                script = Activator.CreateInstance(type) as Script;

                                script.Log = log;
                                script.Test(row.Dict);

                                var parameters = type.GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance).Where(t => t.GetCustomAttribute<InjectAttribute>() != null).ToList();
                                foreach (var parameter in parameters)
                                {
                                    var objvalue = parameter.GetValue(script);
                                    if (objvalue != null)
                                    {
                                        var returntype = typeof(RegistrationBuilder<>).MakeGenericType(parameter.FieldType);
                                        var parobj = Convert.ChangeType(config.GetRB(parameter.FieldType), returntype);
                                        if (parobj != null)
                                        {
                                            MethodInfo handlerMethod = returntype.GetProperty("EndHandle").GetValue(parobj).GetType().GetMethod("Invoke");
                                            handlerMethod.Invoke(returntype.GetProperty("EndHandle").GetValue(parobj), new object[] { objvalue, log });
                                        }
                                    }
                                }


                                testcase.Pass += 1;
                                rd.Status = "Pass";
                                if (string.IsNullOrEmpty(script.Country))
                                {
                                    var countrydata = row.Dict.FirstOrDefault(t => "country" == t.Key.ToLower());
                                    if (!string.IsNullOrEmpty(countrydata.Value))
                                    {
                                        rd.Country = countrydata.Value;
                                    }
                                }
                                else
                                {
                                    rd.Country = script.Country;

                                }

                                if (string.IsNullOrEmpty(script.CaseId))
                                {
                                    var caseiddata = row.Dict.FirstOrDefault(t => "caseid" == t.Key.ToLower());
                                    if (!string.IsNullOrEmpty(caseiddata.Value))
                                    {
                                        rd.CaseId = caseiddata.Value;
                                    }
                                }
                                else
                                {
                                    rd.CaseId = script.CaseId;

                                }
                                if (string.IsNullOrEmpty(script.ReportName))
                                {
                                    var reportnamedata = row.Dict.FirstOrDefault(t => "reportname" == t.Key.ToLower());
                                    if (!string.IsNullOrEmpty(reportnamedata.Value))
                                    {
                                        rd.Name = reportnamedata.Value;
                                    }


                                }
                                else
                                {
                                    rd.Name = script.ReportName;

                                }
                            }
                            catch (Exception.AssertionException e)
                            {
                                Console.WriteLine(e.Message);
                                testcase.Fail += 1;
                                rd.Status = "Fail";
                                rd.ErrorMessage = e.Message;
                                if (string.IsNullOrEmpty(script.Country))
                                {
                                    var countrydata = row.Dict.FirstOrDefault(t => "country" == t.Key.ToLower());
                                    if (!string.IsNullOrEmpty(countrydata.Value))
                                    {
                                        rd.Country = countrydata.Value;
                                    }
                                }
                                else
                                {
                                    rd.Country = script.Country;

                                }

                                if (string.IsNullOrEmpty(script.CaseId))
                                {
                                    var caseiddata = row.Dict.FirstOrDefault(t => "caseid" == t.Key.ToLower());
                                    if (!string.IsNullOrEmpty(caseiddata.Value))
                                    {
                                        rd.CaseId = caseiddata.Value;
                                    }
                                }
                                else
                                {
                                    rd.CaseId = script.CaseId;

                                }
                                if (string.IsNullOrEmpty(script.ReportName))
                                {
                                    var reportnamedata = row.Dict.FirstOrDefault(t => "reportname" == t.Key.ToLower());
                                    if (!string.IsNullOrEmpty(reportnamedata.Value))
                                    {
                                        rd.Name = reportnamedata.Value;
                                    }


                                }
                                else
                                {
                                    rd.Name = script.ReportName;

                                }

                                var parameters = type.GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance).Where(t => t.GetCustomAttribute<InjectAttribute>() != null).ToList();
                                foreach (var parameter in parameters)
                                {
                                    var objvalue = parameter.GetValue(script);
                                    if (objvalue != null)
                                    {
                                        var returntype = typeof(RegistrationBuilder<>).MakeGenericType(parameter.FieldType);
                                        var parobj = Convert.ChangeType(config.GetRB(parameter.FieldType), returntype);
                                        if (parobj != null)
                                        {
                                            MethodInfo handlerMethod = returntype.GetProperty("ExceptionHandle").GetValue(parobj).GetType().GetMethod("Invoke");
                                            handlerMethod.Invoke(returntype.GetProperty("ExceptionHandle").GetValue(parobj), new object[] { objvalue, log });
                                        }
                                    }
                                }

                                log.Info("-------------------------Failed------------------------\r\n");
                                log.Info($"{e.Message}\r\n");
                                log.Info("-------------------------Tracking---------------------\r\n");
                                log.Info($"{e.StackTrace}\r\n");



                            }
                            catch (System.Exception e)
                            {
                                var parameters = type.GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance).Where(t => t.GetCustomAttribute<InjectAttribute>() != null).ToList();
                                foreach (var parameter in parameters)
                                {
                                    var objvalue = parameter.GetValue(script);
                                    if (objvalue != null)
                                    {
                                        var returntype = typeof(RegistrationBuilder<>).MakeGenericType(parameter.FieldType);
                                        var parobj = Convert.ChangeType(config.GetRB(parameter.FieldType), returntype);
                                        if (parobj != null)
                                        {
                                            MethodInfo handlerMethod = returntype.GetProperty("ExceptionHandle").GetValue(parobj).GetType().GetMethod("Invoke");
                                            handlerMethod.Invoke(returntype.GetProperty("ExceptionHandle").GetValue(parobj), new object[] { objvalue, log });
                                        }
                                    }
                                }

                                var innerex = GetInnerException(e);
                                log.Info("-------------------------Error------------------------\r\n");
                                log.Info($"{innerex.Message}\r\n");
                                log.Info("-------------------------Tracking---------------------\r\n");
                                log.Info($"{innerex.StackTrace}\r\n");
                                Console.WriteLine(innerex.Message);
                                testcase.Error += 1;
                                rd.Status = "Error";
                                rd.ErrorMessage = e.Message;

                                if (string.IsNullOrEmpty(script.Country))
                                {
                                    var countrydata = row.Dict.FirstOrDefault(t => "country" == t.Key.ToLower());
                                    if (!string.IsNullOrEmpty(countrydata.Value))
                                    {
                                        rd.Country = countrydata.Value;
                                    }
                                }
                                else
                                {
                                    rd.Country = script.Country;

                                }

                                if (string.IsNullOrEmpty(script.CaseId))
                                {
                                    var caseiddata = row.Dict.FirstOrDefault(t => "caseid" == t.Key.ToLower());
                                    if (!string.IsNullOrEmpty(caseiddata.Value))
                                    {
                                        rd.CaseId = caseiddata.Value;
                                    }
                                }
                                else
                                {
                                    rd.CaseId = script.CaseId;

                                }
                                if (string.IsNullOrEmpty(script.ReportName))
                                {
                                    var reportnamedata = row.Dict.FirstOrDefault(t => "reportname" == t.Key.ToLower());
                                    if (!string.IsNullOrEmpty(reportnamedata.Value))
                                    {
                                        rd.Name = reportnamedata.Value;
                                    }


                                }
                                else
                                {
                                    rd.Name = script.ReportName;

                                }
                            }
                            rd.Log = log.Stores.Clone();
                            rd.Data = row.Dict;
                        }
                    }


                }
                try
                {
                    dp.Update(dt);
                }
                catch (System.Exception ee)
                {
                    Console.WriteLine(ee.Message);
                }

                rm.Duration = (DateTime.Now - rm.StartTime).Duration();
                rm.GenReport($"{data}_{DateTime.Now.ToString("MMddyyyyHHmmss")}.html", config.LogFolderPath);
                Console.WriteLine("Script completed execution.");

            }









        }

        private System.Exception GetInnerException(System.Exception ex)
        {
            if (ex.InnerException == null)
                return ex;
            else
                return GetInnerException(ex.InnerException);
        }
    }
}